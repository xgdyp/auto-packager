# .github/workflows/comment-triggered-build.yml

name: Comment Triggered Docker Build

# 触发条件：当在Issue或Pull Request中创建新评论时
on:
  issue_comment:
    types: [created,edit]
  issues:
    types: [opened, edited,labeled]

jobs:
  build-and-push:
    # 安全措施：
    # 1. 确保评论内容包含 "/build" 指令
    # 2. 确保评论者是仓库的所有者(OWNER)、成员(MEMBER)或协作者(COLLABORATOR)，防止任意用户触发构建
    if: |
      contains(github.event.comment.body, '/build') &&
      (
        github.event.comment.author_association == 'OWNER' ||
        github.event.comment.author_association == 'MEMBER' ||
        github.event.comment.author_association == 'COLLABORATOR'
      )
    runs-on: ubuntu-latest
    permissions:
      contents: read      # 读取仓库内容
      packages: write    # 写入 GHCR
      issues: write      # 回复评论

    steps:
      - name: 💬 1. 解析评论内容
        id: parse_comment
        run: |
          # 从评论中提取 git 仓库地址
          # 例如: /build https://github.com/user/repo.git
          REPO_URL=$(echo "${{ github.event.comment.body }}" | grep -o 'https://github.com/[^ ]*' | head -n 1)
          if [ -z "$REPO_URL" ]; then
            echo "错误：在评论中未找到有效的 GitHub 仓库地址。"
            exit 1
          fi
          # 从URL中提取仓库名，例如 "user/repo"
          REPO_NAME=$(echo "$REPO_URL" | sed 's|https://github.com/||' | sed 's/\.git$//')
          
          echo "target_repo_url=${REPO_URL}" >> $GITHUB_OUTPUT
          echo "target_repo_name=${REPO_NAME}" >> $GITHUB_OUTPUT
          echo "target_repo_url=${REPO_URL}"
          echo "target_repo_name=${REPO_NAME}" 
          echo "镜像名称将是： ghcr.io/${{ github.repository_owner }}/${REPO_NAME##*/}"

      - name: 🗣️ 2. 回复评论，告知任务已开始
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `🚀 收到构建请求！\n* **目标仓库:** \`${{ steps.parse_comment.outputs.target_repo_url }}\`\n* **开始拉取代码并构建镜像...**\n\n你可以在 [Actions 页面](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}) 查看实时日志。`
            });

      - name: 📥 3. 拉取目标仓库代码
        uses: actions/checkout@v4
        with:
          repository: ${{ steps.parse_comment.outputs.target_repo_name }}
          # 使用 PAT 拉取代码，因为 GITHUB_TOKEN 可能没有权限访问其他私有仓库
          token: ${{ secrets.CROSS_REPO_PAT }} 
          path: './target-repo' # 将代码下载到指定目录

      - name: 🆔 4. 获取代码的短哈希值作为镜像标签
        id: get_sha
        run: |
          cd ./target-repo
          echo "sha=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT
      
      - name: 🐳 5. 登录到 GitHub Container Registry (GHCR)
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          # GITHUB_TOKEN 是由 GitHub Actions 自动创建的，用于认证
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: ⚙️ 6. 设置 Docker buildx
        uses: docker/setup-buildx-action@v3

      - name: 🛠️ 7. 构建并推送 Docker 镜像
        id: build_and_push
        uses: docker/build-push-action@v5
        with:
          context: ./target-repo  # Dockerfile 所在的目录
          push: true
          # 镜像命名规则: ghcr.io/主控仓库所有者/目标仓库名:代码commit哈希
          tags: ghcr.io/${{ github.repository_owner }}/test2:${{ steps.get_sha.outputs.sha }}
          labels: |
            org.opencontainers.image.source=${{ steps.parse_comment.outputs.target_repo_url }}
            org.opencontainers.image.revision=${{ steps.get_sha.outputs.sha }}
      
      # - name: ✅ 8. 成功后回复评论
      #   if: success()
      #   uses: actions/github-script@v7
      #   with:
      #     script: |
      #       github.rest.issues.createComment({
      #         issue_number: context.issue.number,
      #         owner: context.repo.owner,
      #         repo: context.repo.repo,
      #         body: `✅ 构建成功！\n\n* **镜像地址:** \`ghcr.io/${{ github.repository_owner }}/${{ steps.parse_comment.outputs.target_repo_name##*/ }}:${{ steps.get_sha.outputs.sha }}\`\n\n你可以使用以下命令拉取镜像：\n\`\`\`bash\ndocker pull ghcr.io/${{ github.repository_owner }}/${{ steps.parse_comment.outputs.target_repo_name##*/ }}:${{ steps.get_sha.outputs.sha }}\n\`\`\``
      #       });

      - name: ❌ 9. 失败后回复评论
        if: failure()
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `❌ 构建失败。\n\n请检查 [Actions 日志](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}) 获取详细错误信息。`
            });